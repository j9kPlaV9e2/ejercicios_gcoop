/** usá el lenguaje que vos quieras, no es necesario que "compile".
/** por favor escribí el código de las soluciones debajo de cada consigna :)
/** la entrega debe incluir la creación de un repo git, puede ser en github u otra plataforma.

[0] crea un repo git local y realiza un commit inicial con este archivo.

[1] qué hace esta funcion? describila y cambia su nombre por uno que te parezca bien

*/

/**
 * Descripción: Devuelve el ganador del partido. Retorna el equipo local, salvo que:
 *              el de visitante tenga 100 o más de suerte o falle (sea false) la cábala del equipo local
 */
function ponderar_suerte(local, visitante)
{
    let ganador = local;

    if(visitante.suerte > 99 || !local.cabala)
    {
        ganador = visitante;
    }
    return ganador;
}

/**
* [2] modelá a los equipos
* Sacachispas que tiene 14 de suerte y no tiene cábala
* Deportivo Morón que tiene 1 de suerte y tiene cábala
* Carmen Sandiego que tiene 100 de suerte y no tiene cábala
* San Justo FC que tiene 12 de suerte y no tiene cábala
*/

Ver codigo_completo.cpp

/**
* [3] escribi la funcion esEmpate que dados dos equipos indica si empatan,
* estos lo hacen cuando su suerte es parecida (+/- 2) y ninguno tiene cábala.
*/

Ver codigo_completo.cpp, Cancha::esEmpate()

/**
* [4] indicá quien sería el ganador en cada caso:
*
* Local               Visitante
* Deportivo Moron     San Justo FC
* Carmen Sandiego     Sacachispas
* Sacachispas         San Justo FC
* */

Ver ejercicio.cpp, tanto Cancha::jugar() como main()

/**
* [5] agregá una funcion que dados dos equipos haga que jueguen, esto es:
* _ que sume los puntos por cada partido, teniendo en cuenta que si es empate ambos suman un punto, de lo contrario solo el ganador sumará 3 puntos
* _ que se encargue de actualizar la cantidad de derrotas/victorias/empates de cada equipo
*/

Ver clase Cancha, tanto jugar(), como imprimirTabla(), como main() (sólo anexé el map que lleva los puntos y agregué imprimirTabla())

-------------

Ver el historial de commits, traté de hacer un commit por cada ejercicio (así se van observando los cambios en el código)
